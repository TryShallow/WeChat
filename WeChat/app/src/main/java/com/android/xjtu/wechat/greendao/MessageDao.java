package com.android.xjtu.wechat.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.android.xjtu.wechat.dao.Message;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MESSAGE".
*/
public class MessageDao extends AbstractDao<Message, Void> {

    public static final String TABLENAME = "MESSAGE";

    /**
     * Properties of entity Message.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", false, "id");
        public final static Property UserSend = new Property(1, Long.class, "userSend", false, "user_send");
        public final static Property UserRecv = new Property(2, Long.class, "userRecv", false, "user_recv");
        public final static Property MsgType = new Property(3, int.class, "msgType", false, "type");
        public final static Property Content = new Property(4, String.class, "content", false, "content");
        public final static Property CreateTime = new Property(5, long.class, "createTime", false, "create_time");
    }


    public MessageDao(DaoConfig config) {
        super(config);
    }
    
    public MessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MESSAGE\" (" + //
                "\"id\" INTEGER NOT NULL ," + // 0: id
                "\"user_send\" INTEGER," + // 1: userSend
                "\"user_recv\" INTEGER," + // 2: userRecv
                "\"type\" INTEGER NOT NULL ," + // 3: msgType
                "\"content\" TEXT," + // 4: content
                "\"create_time\" INTEGER NOT NULL );"); // 5: createTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MESSAGE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Message entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        Long userSend = entity.getUserSend();
        if (userSend != null) {
            stmt.bindLong(2, userSend);
        }
 
        Long userRecv = entity.getUserRecv();
        if (userRecv != null) {
            stmt.bindLong(3, userRecv);
        }
        stmt.bindLong(4, entity.getMsgType());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(5, content);
        }
        stmt.bindLong(6, entity.getCreateTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Message entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        Long userSend = entity.getUserSend();
        if (userSend != null) {
            stmt.bindLong(2, userSend);
        }
 
        Long userRecv = entity.getUserRecv();
        if (userRecv != null) {
            stmt.bindLong(3, userRecv);
        }
        stmt.bindLong(4, entity.getMsgType());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(5, content);
        }
        stmt.bindLong(6, entity.getCreateTime());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Message readEntity(Cursor cursor, int offset) {
        Message entity = new Message( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // userSend
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // userRecv
            cursor.getInt(offset + 3), // msgType
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // content
            cursor.getLong(offset + 5) // createTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Message entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setUserSend(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setUserRecv(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setMsgType(cursor.getInt(offset + 3));
        entity.setContent(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCreateTime(cursor.getLong(offset + 5));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Message entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Message entity) {
        return null;
    }

    @Override
    public boolean hasKey(Message entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
