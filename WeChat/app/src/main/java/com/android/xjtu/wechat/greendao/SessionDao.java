package com.android.xjtu.wechat.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.android.xjtu.wechat.dao.Session;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SESSION".
*/
public class SessionDao extends AbstractDao<Session, Void> {

    public static final String TABLENAME = "SESSION";

    /**
     * Properties of entity Session.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", false, "ID");
        public final static Property UserOwn = new Property(1, long.class, "userOwn", false, "user_own");
        public final static Property UserOther = new Property(2, long.class, "userOther", false, "user_other");
        public final static Property SendFlag = new Property(3, int.class, "sendFlag", false, "send_flag");
        public final static Property LastMsgId = new Property(4, int.class, "lastMsgId", false, "last_msg_id");
        public final static Property LastMsgContent = new Property(5, String.class, "lastMsgContent", false, "last_msg_content");
        public final static Property CreateTime = new Property(6, long.class, "createTime", false, "create_time");
    }


    public SessionDao(DaoConfig config) {
        super(config);
    }
    
    public SessionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SESSION\" (" + //
                "\"ID\" INTEGER NOT NULL ," + // 0: id
                "\"user_own\" INTEGER NOT NULL ," + // 1: userOwn
                "\"user_other\" INTEGER NOT NULL ," + // 2: userOther
                "\"send_flag\" INTEGER NOT NULL ," + // 3: sendFlag
                "\"last_msg_id\" INTEGER NOT NULL ," + // 4: lastMsgId
                "\"last_msg_content\" TEXT," + // 5: lastMsgContent
                "\"create_time\" INTEGER NOT NULL );"); // 6: createTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SESSION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Session entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getUserOwn());
        stmt.bindLong(3, entity.getUserOther());
        stmt.bindLong(4, entity.getSendFlag());
        stmt.bindLong(5, entity.getLastMsgId());
 
        String lastMsgContent = entity.getLastMsgContent();
        if (lastMsgContent != null) {
            stmt.bindString(6, lastMsgContent);
        }
        stmt.bindLong(7, entity.getCreateTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Session entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getUserOwn());
        stmt.bindLong(3, entity.getUserOther());
        stmt.bindLong(4, entity.getSendFlag());
        stmt.bindLong(5, entity.getLastMsgId());
 
        String lastMsgContent = entity.getLastMsgContent();
        if (lastMsgContent != null) {
            stmt.bindString(6, lastMsgContent);
        }
        stmt.bindLong(7, entity.getCreateTime());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Session readEntity(Cursor cursor, int offset) {
        Session entity = new Session( //
            cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // userOwn
            cursor.getLong(offset + 2), // userOther
            cursor.getInt(offset + 3), // sendFlag
            cursor.getInt(offset + 4), // lastMsgId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // lastMsgContent
            cursor.getLong(offset + 6) // createTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Session entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setUserOwn(cursor.getLong(offset + 1));
        entity.setUserOther(cursor.getLong(offset + 2));
        entity.setSendFlag(cursor.getInt(offset + 3));
        entity.setLastMsgId(cursor.getInt(offset + 4));
        entity.setLastMsgContent(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCreateTime(cursor.getLong(offset + 6));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Session entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Session entity) {
        return null;
    }

    @Override
    public boolean hasKey(Session entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
